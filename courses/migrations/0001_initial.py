# Generated by Django 4.2.23 on 2025-09-16 15:23

import courses.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("programs", "0003_programmodule_minimum_completion_percentage"),
    ]

    operations = [
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "instructions",
                    models.TextField(help_text="Detailed instructions for students"),
                ),
                (
                    "assignment_type",
                    models.CharField(
                        choices=[
                            ("essay", "Essay"),
                            ("project", "Project"),
                            ("presentation", "Presentation"),
                            ("practical", "Practical Exercise"),
                            ("research", "Research Assignment"),
                            ("case_study", "Case Study"),
                            ("reflection", "Reflection Paper"),
                            ("quiz", "Quiz"),
                            ("exam", "Exam"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "max_points",
                    models.IntegerField(
                        default=100, help_text="Maximum points for this assignment"
                    ),
                ),
                ("due_date", models.DateTimeField(help_text="Assignment due date")),
                (
                    "late_submission_penalty",
                    models.IntegerField(
                        default=10, help_text="Percentage penalty per day late"
                    ),
                ),
                ("allow_late_submission", models.BooleanField(default=True)),
                (
                    "assignment_file",
                    models.FileField(
                        blank=True,
                        help_text="Assignment document or template",
                        null=True,
                        upload_to=courses.models.assignment_upload_path,
                    ),
                ),
                (
                    "rubric_file",
                    models.FileField(
                        blank=True,
                        help_text="Grading rubric",
                        null=True,
                        upload_to=courses.models.assignment_upload_path,
                    ),
                ),
                (
                    "is_quiz",
                    models.BooleanField(
                        default=False, help_text="Whether this assignment is a quiz"
                    ),
                ),
                (
                    "time_limit_minutes",
                    models.IntegerField(
                        blank=True,
                        help_text="Time limit for quiz in minutes",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(1)],
                    ),
                ),
                (
                    "passing_score",
                    models.IntegerField(
                        default=70,
                        help_text="Minimum score required to pass (%)",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Assignment",
                "verbose_name_plural": "Assignments",
                "ordering": ["due_date", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("slug", models.SlugField(unique=True)),
                ("description", models.TextField()),
                ("week_count", models.IntegerField(default=4)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "program_module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="courses",
                        to="programs.programmodule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Course",
                "verbose_name_plural": "Courses",
            },
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lesson_number",
                    models.IntegerField(help_text="Lesson number within the topic"),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "learning_objectives",
                    models.TextField(
                        help_text="Specific learning objectives for this lesson"
                    ),
                ),
                (
                    "lesson_type",
                    models.CharField(
                        choices=[
                            ("theory", "Theory Session"),
                            ("practical", "Practical Session"),
                            ("mixed", "Mixed Session"),
                            ("assessment", "Assessment Session"),
                            ("discussion", "Discussion Session"),
                        ],
                        default="mixed",
                        max_length=20,
                    ),
                ),
                (
                    "duration_minutes",
                    models.IntegerField(
                        default=90, help_text="Lesson duration in minutes"
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Lesson content and instructions"),
                ),
                (
                    "instructor_notes",
                    models.TextField(blank=True, help_text="Notes for instructors"),
                ),
                (
                    "sequence_order",
                    models.IntegerField(default=1, help_text="Order within the topic"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Lessons that must be completed first",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson",
                "verbose_name_plural": "Lessons",
                "ordering": ["topic", "sequence_order", "lesson_number"],
            },
        ),
        migrations.CreateModel(
            name="LessonResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("video", "Video"),
                            ("reading", "Reading Material"),
                            ("document", "Document"),
                            ("link", "External Link"),
                            ("presentation", "Presentation"),
                            ("audio", "Audio"),
                            ("interactive", "Interactive Content"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, help_text="Text content or description"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=courses.models.lesson_resource_upload_path,
                    ),
                ),
                (
                    "url",
                    models.URLField(blank=True, help_text="External URL for links"),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True, help_text="Required for lesson completion"
                    ),
                ),
                (
                    "estimated_duration_minutes",
                    models.IntegerField(
                        default=15, help_text="Estimated time to complete"
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order within lesson"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson Resource",
                "verbose_name_plural": "Lesson Resources",
                "ordering": ["lesson", "order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="Module",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                (
                    "module_type",
                    models.CharField(
                        choices=[
                            (
                                "young_theologians",
                                "Module 1: Young Theologians and Gospel Advancing",
                            ),
                            ("missional_leadership", "Module 2: Missional Leadership"),
                            (
                                "sdgs_community",
                                "Module 3: SDGs & Community Transformation",
                            ),
                            (
                                "education_sustainable",
                                "Module 4: Education for Sustainable Development & Global Citizenship",
                            ),
                            (
                                "entrepreneurship",
                                "Module 5: Entrepreneurship and Political Economics",
                            ),
                            ("diplomacy", "Module 6: Diplomacy & Global Leadership"),
                            ("climate_warriors", "Module 7: Climate Warriors"),
                        ],
                        max_length=50,
                        unique=True,
                    ),
                ),
                ("description", models.TextField()),
                ("learning_objectives", models.TextField()),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="module_images/"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Module",
                "verbose_name_plural": "Modules",
            },
        ),
        migrations.CreateModel(
            name="ModuleTopic",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "topic_number",
                    models.IntegerField(help_text="Topic number within the module"),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "learning_objectives",
                    models.TextField(
                        help_text="Specific learning objectives for this topic"
                    ),
                ),
                (
                    "total_credits",
                    models.IntegerField(help_text="Total credits for this topic"),
                ),
                (
                    "total_hours",
                    models.IntegerField(help_text="Total hours for this topic"),
                ),
                (
                    "theory_hours",
                    models.IntegerField(help_text="Theory component hours"),
                ),
                (
                    "practical_hours",
                    models.IntegerField(help_text="Practical component hours"),
                ),
                (
                    "theory_content",
                    models.TextField(
                        help_text="Theory content and classroom activities"
                    ),
                ),
                (
                    "theory_resources",
                    models.TextField(
                        blank=True, help_text="Required readings, case studies, etc."
                    ),
                ),
                (
                    "practical_activities",
                    models.TextField(help_text="Practical activities and exercises"),
                ),
                (
                    "practical_deliverables",
                    models.TextField(help_text="What students need to produce"),
                ),
                (
                    "assessment_criteria",
                    models.TextField(help_text="How this topic will be assessed"),
                ),
                ("is_active", models.BooleanField(default=True)),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order within the module"
                    ),
                ),
                (
                    "program_module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="topics",
                        to="programs.programmodule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Module Topic",
                "verbose_name_plural": "Module Topics",
                "ordering": ["program_module", "order", "topic_number"],
                "unique_together": {("program_module", "topic_number")},
            },
        ),
        migrations.CreateModel(
            name="WeeklyResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("week_number", models.IntegerField()),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("video", "Video"),
                            ("reading", "Reading"),
                            ("assignment", "Assignment"),
                            ("discussion", "Discussion"),
                            ("quiz", "Quiz"),
                        ],
                        max_length=50,
                    ),
                ),
                ("is_required", models.BooleanField(default=True)),
                ("order", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="weekly_resources",
                        to="courses.course",
                    ),
                ),
            ],
            options={
                "ordering": ["week_number", "order"],
                "unique_together": {("course", "week_number", "order")},
            },
        ),
        migrations.CreateModel(
            name="TopicDiscussion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(default="Topic Discussion", max_length=200)),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this discussion is about",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "topic",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discussion",
                        to="courses.moduletopic",
                    ),
                ),
            ],
            options={
                "verbose_name": "Topic Discussion",
                "verbose_name_plural": "Topic Discussions",
            },
        ),
        migrations.CreateModel(
            name="QuizQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("multiple_choice", "Multiple Choice"),
                            ("true_false", "True/False"),
                            ("short_answer", "Short Answer"),
                            ("essay", "Essay"),
                        ],
                        max_length=20,
                    ),
                ),
                ("text", models.TextField()),
                (
                    "points",
                    models.IntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="courses.assignment",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
            },
        ),
        migrations.CreateModel(
            name="ModuleDiscussion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(default="Module Discussion", max_length=200),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Description of what this discussion is about",
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "program_module",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discussion",
                        to="programs.programmodule",
                    ),
                ),
            ],
            options={
                "verbose_name": "Module Discussion",
                "verbose_name_plural": "Module Discussions",
            },
        ),
        migrations.AddField(
            model_name="lesson",
            name="topic",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="lessons",
                to="courses.moduletopic",
            ),
        ),
        migrations.CreateModel(
            name="DiscussionPost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("content", models.TextField()),
                (
                    "attachment",
                    models.FileField(
                        blank=True, null=True, upload_to="discussion_attachments/"
                    ),
                ),
                (
                    "is_pinned",
                    models.BooleanField(
                        default=False, help_text="Pin important posts to the top"
                    ),
                ),
                (
                    "is_locked",
                    models.BooleanField(
                        default=False, help_text="Lock post to prevent further replies"
                    ),
                ),
                (
                    "is_approved",
                    models.BooleanField(
                        default=True, help_text="Approve post for visibility"
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("edited_at", models.DateTimeField(blank=True, null=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discussion_posts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "module_discussion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="courses.modulediscussion",
                    ),
                ),
                (
                    "parent_post",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="courses.discussionpost",
                    ),
                ),
                (
                    "topic_discussion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="posts",
                        to="courses.topicdiscussion",
                    ),
                ),
            ],
            options={
                "verbose_name": "Discussion Post",
                "verbose_name_plural": "Discussion Posts",
                "ordering": ["-is_pinned", "-created_at"],
            },
        ),
        migrations.AddField(
            model_name="assignment",
            name="lesson",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignments",
                to="courses.lesson",
            ),
        ),
        migrations.AddField(
            model_name="assignment",
            name="topic",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assignments",
                to="courses.moduletopic",
            ),
        ),
        migrations.CreateModel(
            name="WeekProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "weekly_resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.weeklyresource",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "weekly_resource")},
            },
        ),
        migrations.CreateModel(
            name="ResourceView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("viewed_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "time_spent",
                    models.IntegerField(default=0, help_text="Time spent in seconds"),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "weekly_resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="courses.weeklyresource",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "weekly_resource")},
            },
        ),
        migrations.CreateModel(
            name="ResourceProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_viewed", models.BooleanField(default=False)),
                ("is_completed", models.BooleanField(default=False)),
                ("view_count", models.IntegerField(default=0)),
                ("first_viewed_at", models.DateTimeField(blank=True, null=True)),
                ("last_viewed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("time_spent_minutes", models.IntegerField(default=0)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_progress",
                        to="courses.lessonresource",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource Progress",
                "verbose_name_plural": "Resource Progress",
                "unique_together": {("student", "resource")},
            },
        ),
        migrations.CreateModel(
            name="QuizChoice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.CharField(max_length=200)),
                ("is_correct", models.BooleanField(default=False)),
                (
                    "explanation",
                    models.TextField(
                        blank=True,
                        help_text="Explanation for why this choice is correct/incorrect",
                    ),
                ),
                ("order", models.IntegerField(default=0)),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="choices",
                        to="courses.quizquestion",
                    ),
                ),
            ],
            options={
                "ordering": ["order"],
                "indexes": [
                    models.Index(
                        fields=["question", "order"],
                        name="quiz_choice_question_order_idx",
                    )
                ],
            },
        ),
        migrations.CreateModel(
            name="ModuleProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("progress_percentage", models.FloatField(default=0.0)),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                (
                    "is_unlocked",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this module is accessible to the student",
                    ),
                ),
                (
                    "unlocked_at",
                    models.DateTimeField(
                        blank=True, help_text="When this module was unlocked", null=True
                    ),
                ),
                (
                    "program_module",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="programs.programmodule",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["program_module__id"],
                "unique_together": {("student", "program_module")},
            },
        ),
        migrations.CreateModel(
            name="LessonProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_started", models.BooleanField(default=False)),
                ("is_completed", models.BooleanField(default=False)),
                ("completion_percentage", models.FloatField(default=0.0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                ("time_spent_minutes", models.IntegerField(default=0)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_progress",
                        to="courses.lesson",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson Progress",
                "verbose_name_plural": "Lesson Progress",
                "unique_together": {("student", "lesson")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="lesson",
            unique_together={("topic", "lesson_number")},
        ),
        migrations.CreateModel(
            name="DiscussionView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_viewed_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "last_post_seen",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="courses.discussionpost",
                    ),
                ),
                (
                    "module_discussion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="courses.modulediscussion",
                    ),
                ),
                (
                    "topic_discussion",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="courses.topicdiscussion",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discussion_views",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Discussion View",
                "verbose_name_plural": "Discussion Views",
                "unique_together": {
                    ("module_discussion", "user"),
                    ("topic_discussion", "user"),
                },
            },
        ),
        migrations.CreateModel(
            name="DiscussionLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "post",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="courses.discussionpost",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="discussion_likes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Discussion Like",
                "verbose_name_plural": "Discussion Likes",
                "unique_together": {("post", "user")},
            },
        ),
        migrations.CreateModel(
            name="AssignmentSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "submission_text",
                    models.TextField(blank=True, help_text="Text submission or notes"),
                ),
                (
                    "submission_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=courses.models.submission_upload_path,
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("is_late", models.BooleanField(default=False)),
                (
                    "attempt_number",
                    models.IntegerField(
                        default=1, help_text="Submission attempt number"
                    ),
                ),
                ("is_graded", models.BooleanField(default=False)),
                ("points_earned", models.IntegerField(blank=True, null=True)),
                ("grade_percentage", models.FloatField(blank=True, null=True)),
                ("instructor_feedback", models.TextField(blank=True)),
                ("graded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="courses.assignment",
                    ),
                ),
                (
                    "graded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Assignment Submission",
                "verbose_name_plural": "Assignment Submissions",
                "ordering": ["-submitted_at"],
                "unique_together": {("assignment", "student", "attempt_number")},
            },
        ),
    ]
