# Generated by Django 4.2.23 on 2025-09-12 18:45

import courses.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("courses", "0002_alter_moduleprogress_options_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "lesson_number",
                    models.IntegerField(help_text="Lesson number within the topic"),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "learning_objectives",
                    models.TextField(
                        help_text="Specific learning objectives for this lesson"
                    ),
                ),
                (
                    "lesson_type",
                    models.CharField(
                        choices=[
                            ("theory", "Theory Session"),
                            ("practical", "Practical Session"),
                            ("mixed", "Mixed Session"),
                            ("assessment", "Assessment Session"),
                            ("discussion", "Discussion Session"),
                        ],
                        default="mixed",
                        max_length=20,
                    ),
                ),
                (
                    "duration_minutes",
                    models.IntegerField(
                        default=90, help_text="Lesson duration in minutes"
                    ),
                ),
                (
                    "content",
                    models.TextField(help_text="Lesson content and instructions"),
                ),
                (
                    "instructor_notes",
                    models.TextField(blank=True, help_text="Notes for instructors"),
                ),
                (
                    "sequence_order",
                    models.IntegerField(default=1, help_text="Order within the topic"),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "prerequisites",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Lessons that must be completed first",
                        to="courses.lesson",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lessons",
                        to="courses.moduletopic",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson",
                "verbose_name_plural": "Lessons",
                "ordering": ["topic", "sequence_order", "lesson_number"],
                "unique_together": {("topic", "lesson_number")},
            },
        ),
        migrations.CreateModel(
            name="LessonResource",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "resource_type",
                    models.CharField(
                        choices=[
                            ("video", "Video"),
                            ("reading", "Reading Material"),
                            ("document", "Document"),
                            ("link", "External Link"),
                            ("presentation", "Presentation"),
                            ("audio", "Audio"),
                            ("interactive", "Interactive Content"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, help_text="Text content or description"
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=courses.models.lesson_resource_upload_path,
                    ),
                ),
                (
                    "url",
                    models.URLField(blank=True, help_text="External URL for links"),
                ),
                (
                    "is_required",
                    models.BooleanField(
                        default=True, help_text="Required for lesson completion"
                    ),
                ),
                (
                    "estimated_duration_minutes",
                    models.IntegerField(
                        default=15, help_text="Estimated time to complete"
                    ),
                ),
                (
                    "order",
                    models.IntegerField(
                        default=0, help_text="Display order within lesson"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resources",
                        to="courses.lesson",
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson Resource",
                "verbose_name_plural": "Lesson Resources",
                "ordering": ["lesson", "order", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="Assignment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "instructions",
                    models.TextField(help_text="Detailed instructions for students"),
                ),
                (
                    "assignment_type",
                    models.CharField(
                        choices=[
                            ("essay", "Essay"),
                            ("project", "Project"),
                            ("presentation", "Presentation"),
                            ("practical", "Practical Exercise"),
                            ("research", "Research Assignment"),
                            ("case_study", "Case Study"),
                            ("reflection", "Reflection Paper"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "max_points",
                    models.IntegerField(
                        default=100, help_text="Maximum points for this assignment"
                    ),
                ),
                ("due_date", models.DateTimeField(help_text="Assignment due date")),
                (
                    "late_submission_penalty",
                    models.IntegerField(
                        default=10, help_text="Percentage penalty per day late"
                    ),
                ),
                ("allow_late_submission", models.BooleanField(default=True)),
                (
                    "assignment_file",
                    models.FileField(
                        blank=True,
                        help_text="Assignment document or template",
                        null=True,
                        upload_to=courses.models.assignment_upload_path,
                    ),
                ),
                (
                    "rubric_file",
                    models.FileField(
                        blank=True,
                        help_text="Grading rubric",
                        null=True,
                        upload_to=courses.models.assignment_upload_path,
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "lesson",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="courses.lesson",
                    ),
                ),
                (
                    "topic",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignments",
                        to="courses.moduletopic",
                    ),
                ),
            ],
            options={
                "verbose_name": "Assignment",
                "verbose_name_plural": "Assignments",
                "ordering": ["due_date", "created_at"],
            },
        ),
        migrations.CreateModel(
            name="ResourceProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_viewed", models.BooleanField(default=False)),
                ("is_completed", models.BooleanField(default=False)),
                ("view_count", models.IntegerField(default=0)),
                ("first_viewed_at", models.DateTimeField(blank=True, null=True)),
                ("last_viewed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("time_spent_minutes", models.IntegerField(default=0)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_progress",
                        to="courses.lessonresource",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Resource Progress",
                "verbose_name_plural": "Resource Progress",
                "unique_together": {("student", "resource")},
            },
        ),
        migrations.CreateModel(
            name="LessonProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("is_started", models.BooleanField(default=False)),
                ("is_completed", models.BooleanField(default=False)),
                ("completion_percentage", models.FloatField(default=0.0)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("last_accessed", models.DateTimeField(auto_now=True)),
                ("time_spent_minutes", models.IntegerField(default=0)),
                (
                    "lesson",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_progress",
                        to="courses.lesson",
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="lesson_progress",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Lesson Progress",
                "verbose_name_plural": "Lesson Progress",
                "unique_together": {("student", "lesson")},
            },
        ),
        migrations.CreateModel(
            name="AssignmentSubmission",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "submission_text",
                    models.TextField(blank=True, help_text="Text submission or notes"),
                ),
                (
                    "submission_file",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to=courses.models.submission_upload_path,
                    ),
                ),
                (
                    "submitted_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("is_late", models.BooleanField(default=False)),
                (
                    "attempt_number",
                    models.IntegerField(
                        default=1, help_text="Submission attempt number"
                    ),
                ),
                ("is_graded", models.BooleanField(default=False)),
                ("points_earned", models.IntegerField(blank=True, null=True)),
                ("grade_percentage", models.FloatField(blank=True, null=True)),
                ("instructor_feedback", models.TextField(blank=True)),
                ("graded_at", models.DateTimeField(blank=True, null=True)),
                (
                    "assignment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="submissions",
                        to="courses.assignment",
                    ),
                ),
                (
                    "graded_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="graded_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assignment_submissions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Assignment Submission",
                "verbose_name_plural": "Assignment Submissions",
                "ordering": ["-submitted_at"],
                "unique_together": {("assignment", "student", "attempt_number")},
            },
        ),
    ]
